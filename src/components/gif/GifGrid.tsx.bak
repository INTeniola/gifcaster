'use client'

import { useState, useEffect, useRef } from 'react'
import { GiphyGif } from '~/services/giphy'
import { useMiniApp } from '@neynar/react'
import { useGifStore } from '~/stores/gifStore'
import { LayoutGrid, List, Grid2x2, Grid } from 'lucide-react'
import { GifSkeleton } from '~/components/ui/Skeleton'
import { theme } from '~/lib/theme'
import { emotions, findEmotionForGif, EmotionCategory } from '~/lib/emotions'

interface GifGridProps {
  gifs: GiphyGif[]
  loading: boolean
  initialFilter?: 'trending' | 'search' | 'favorites'
  onLoadMore?: () => Promise<void>
}

export default function GifGrid({ gifs, loading, initialFilter = 'trending', onLoadMore }: GifGridProps) {
  const [viewMode, setViewMode] = useState<'grid' | 'list' | 'emotions'>('emotions')
  const [loadingMore, setLoadingMore] = useState(false)
  const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null)

  const groupedGifs = gifs.reduce<Record<string, GiphyGif[]>>((acc, gif) => {
    const emotion = findEmotionForGif(gif.title);
    const category = emotion?.id || 'other';
    acc[category] = [...(acc[category] || []), gif];
    return acc;
  }, {});
  const observerRef = useRef<IntersectionObserver | null>(null)
  const loadMoreRef = useRef<HTMLDivElement>(null)
  
  const { actions } = useMiniApp()
  const { addFavorite, removeFavorite, favorites } = useGifStore()
  
  const isFavorite = (gifId: string) => favorites.some(f => f.id === gifId)

  useEffect(() => {
    if (!onLoadMore) return;

    observerRef.current = new IntersectionObserver(
      async (entries) => {
        const target = entries[0];
        if (target.isIntersecting && !loading && !loadingMore) {
          setLoadingMore(true);
          await onLoadMore();
          setLoadingMore(false);
        }
      },
      { threshold: 0.1 }
    );

    if (loadMoreRef.current) {
      observerRef.current.observe(loadMoreRef.current);
    }

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [onLoadMore, loading, loadingMore]);

  const handleGifSelect = async (gif: GiphyGif) => {
    try {
      await actions.composeCast({
        text: gif.title,
        embeds: [gif.images.original.url]
      })
    } catch (error) {
      console.error('Failed to share GIF:', error)
      if (navigator.clipboard) {
        await navigator.clipboard.writeText(gif.images.original.url)
        alert('GIF URL copied to clipboard!')
      }
    }
  }

  if (loading && !loadingMore) {
    return (
      <div className={viewMode === 'grid' ? 'grid grid-cols-2 md:grid-cols-3 gap-4' : 'space-y-4'}>
        {Array.from({ length: 6 }).map((_, i) => (
          <GifSkeleton key={i} />
        ))}
      </div>
    )
  }

  if (!gifs?.length) {
    return (
      <div className="text-center py-8">
        {initialFilter === 'favorites' ? (
          <div className="space-y-2">
            <p className="text-text-secondary">No favorites yet!</p>
            <p className="text-text-muted text-sm">Click the heart icon on any GIF to save it here</p>
          </div>
        ) : (
          <p className="text-text-secondary">No GIFs found. Try a different search!</p>
        )}
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-end space-x-2">
        <button
          onClick={() => setViewMode('emotions')}
          className={`p-2 rounded-lg transition-colors ${
            viewMode === 'emotions' 
              ? 'bg-primary text-white' 
              : 'text-text-secondary hover:bg-background-hover'
          }`}
          title="Emotion categories"
        >
          <Grid2x2 size={20} />
        </button>
        <button
          onClick={() => setViewMode('grid')}
          className={`p-2 rounded-lg transition-colors ${
            viewMode === 'grid' 
              ? 'bg-primary text-white' 
              : 'text-text-secondary hover:bg-background-hover'
          }`}
          title="Grid view"
        >
          <LayoutGrid size={20} />
        </button>
        <button
          onClick={() => setViewMode('list')}
          className={`p-2 rounded-lg transition-colors ${
            viewMode === 'list' 
              ? 'bg-primary text-white' 
              : 'text-text-secondary hover:bg-background-hover'
          }`}
          title="List view"
        >
          <List size={20} />
        </button>
      </div>

      {viewMode === 'emotions' && (
        <div className="mb-6">
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 mb-4">
            {emotions.map(emotion => (
              <button
                key={emotion.id}
                onClick={() => setSelectedEmotion(emotion.id === selectedEmotion ? null : emotion.id)}
                className={`p-3 rounded-lg text-sm flex items-center gap-2 transition-colors ${
                  emotion.id === selectedEmotion
                    ? 'bg-primary text-white'
                    : 'bg-background-card hover:bg-background-hover text-text-secondary'
                }`}
              >
                <span role="img" aria-label={emotion.name}>{emotion.emoji}</span>
                <span>{emotion.name}</span>
              </button>
            ))}
          </div>
        </div>
      )}
      
      <div className={
        viewMode === 'emotions'
          ? 'space-y-8'
          : viewMode === 'grid'
          ? 'grid grid-cols-2 md:grid-cols-3 gap-4'
          : 'space-y-4'
      }>
        {viewMode === 'emotions' ? (
          Object.entries(groupedGifs)
            .filter(([category]) => !selectedEmotion || category === selectedEmotion)
            .map(([category, categoryGifs]) => {
              const emotion = emotions.find(e => e.id === category);
              return (
                <div key={category} className="space-y-4">
                  <h3 className="text-lg font-medium flex items-center gap-2">
                    <span>{emotion?.emoji || 'ðŸŽ¯'}</span>
                    <span>{emotion?.name || 'Other'}</span>
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {categoryGifs.map((gif) => (
            
          <div 
            key={gif.id}
            className={`
              relative group rounded-xl overflow-hidden 
              ${viewMode === 'list' ? 'aspect-video' : 'aspect-square'}
              transition-transform duration-200 hover:scale-[1.02]
              hover:ring-2 ring-primary/50 cursor-pointer
              bg-background-card
            `}
            onClick={() => handleGifSelect(gif)}
          >
            <img
              src={gif.images.fixed_height.url}
              alt={gif.title}
              className="w-full h-full object-cover"
              loading="lazy"
            />
            <div className="
              absolute inset-0 bg-gradient-to-b from-transparent to-black/60
              opacity-0 group-hover:opacity-100 transition-opacity
            ">
              <div className="absolute bottom-0 left-0 right-0 p-4 flex justify-between items-end">
                <p className="text-white text-sm truncate flex-1">{gif.title}</p>
                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    isFavorite(gif.id) ? removeFavorite(gif.id) : addFavorite(gif)
                  }}
                  className={`ml-2 text-white ${isFavorite(gif.id) ? 'text-pink-500' : 'hover:text-pink-500'} transition-colors`}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill={isFavorite(gif.id) ? 'currentColor' : 'none'}
                    stroke="currentColor"
                    className="w-6 h-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
                    />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {onLoadMore && (
        <div ref={loadMoreRef} className="h-20 flex items-center justify-center">
          {loadingMore && (
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary" />
          )}
        </div>
      )}
    </div>
  )
}